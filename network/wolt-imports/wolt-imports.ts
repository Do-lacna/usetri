/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import type {
  DiscountPriceImportBatchDto,
  UploadWoltJsonBody,
} from '.././model';
import { orvalApiClient } from '.././api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const uploadWoltJson = (
  uploadWoltJsonBody: UploadWoltJsonBody,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (uploadWoltJsonBody.jsonFile !== undefined) {
    formData.append('jsonFile', uploadWoltJsonBody.jsonFile);
  }

  return orvalApiClient<DiscountPriceImportBatchDto>(
    {
      url: `/admin/wolt-imports`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getUploadWoltJsonMutationOptions = <
  TData = Awaited<ReturnType<typeof uploadWoltJson>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['uploadWoltJson'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadWoltJson>>,
    { data: UploadWoltJsonBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadWoltJson(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody },
    TContext
  >;
};

export type UploadWoltJsonMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadWoltJson>>
>;
export type UploadWoltJsonMutationBody = UploadWoltJsonBody;
export type UploadWoltJsonMutationError = unknown;

export const useUploadWoltJson = <
  TData = Awaited<ReturnType<typeof uploadWoltJson>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: UploadWoltJsonBody },
  TContext
> => {
  const mutationOptions = getUploadWoltJsonMutationOptions(options);

  return useMutation(mutationOptions);
};
