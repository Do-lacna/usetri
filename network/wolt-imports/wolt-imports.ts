/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { orvalApiClient } from '.././api-client';
import type {
  GetUnconfirmedWoltImportsResponse,
  UploadWoltJsonBody,
  UploadWoltJsonParams,
} from '.././model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getUnconfirmedWoltImports = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetUnconfirmedWoltImportsResponse>(
    { url: '/admin/wolt-imports', method: 'GET', signal },
    options,
  );
};

export const getGetUnconfirmedWoltImportsQueryKey = () => {
  return ['/admin/wolt-imports'] as const;
};

export const getGetUnconfirmedWoltImportsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUnconfirmedWoltImportsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUnconfirmedWoltImports>>
  > = ({ signal }) => getUnconfirmedWoltImports(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUnconfirmedWoltImportsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUnconfirmedWoltImports>>
>;
export type GetUnconfirmedWoltImportsQueryError = unknown;

export function useGetUnconfirmedWoltImports<
  TData = Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUnconfirmedWoltImports<
  TData = Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUnconfirmedWoltImports<
  TData = Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUnconfirmedWoltImports<
  TData = Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUnconfirmedWoltImports>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUnconfirmedWoltImportsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const uploadWoltJson = (
  uploadWoltJsonBody: UploadWoltJsonBody,
  params?: UploadWoltJsonParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (uploadWoltJsonBody.jsonFile !== undefined) {
    formData.append('jsonFile', uploadWoltJsonBody.jsonFile);
  }

  return orvalApiClient<void>(
    {
      url: '/admin/wolt-imports',
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
      signal,
    },
    options,
  );
};

export const getUploadWoltJsonMutationOptions = <
  TData = Awaited<ReturnType<typeof uploadWoltJson>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody; params?: UploadWoltJsonParams },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['uploadWoltJson'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadWoltJson>>,
    { data: UploadWoltJsonBody; params?: UploadWoltJsonParams }
  > = props => {
    const { data, params } = props ?? {};

    return uploadWoltJson(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody; params?: UploadWoltJsonParams },
    TContext
  >;
};

export type UploadWoltJsonMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadWoltJson>>
>;
export type UploadWoltJsonMutationBody = UploadWoltJsonBody;
export type UploadWoltJsonMutationError = unknown;

export const useUploadWoltJson = <
  TData = Awaited<ReturnType<typeof uploadWoltJson>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadWoltJsonBody; params?: UploadWoltJsonParams },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: UploadWoltJsonBody; params?: UploadWoltJsonParams },
  TContext
> => {
  const mutationOptions = getUploadWoltJsonMutationOptions(options);

  return useMutation(mutationOptions);
};
