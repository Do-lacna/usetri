/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  AddProductBody,
  AddProductToCartResponse,
  GetCartResponse,
  ProblemDetails,
  RemoveFromCartBody,
  RemoveFromCartResponse,
} from ".././model";
import apiClient from "../api-client";

export const addProduct = (
  addProductBody: AddProductBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AddProductToCartResponse>> => {
  const formData = new FormData();
  if (addProductBody.category_ids !== undefined) {
    addProductBody.category_ids.forEach((value) =>
      formData.append("category_ids", value.toString())
    );
  }

  return apiClient.post(`/cart`, formData, options);
};

export const getAddProductMutationOptions = <
  TError = AxiosError<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProduct>>,
    TError,
    { data: AddProductBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: AddProductBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProduct>>,
    { data: AddProductBody }
  > = (props) => {
    const { data } = props ?? {};

    return addProduct(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProduct>>
>;
export type AddProductMutationBody = AddProductBody;
export type AddProductMutationError = AxiosError<ProblemDetails>;

export const useAddProduct = <
  TError = AxiosError<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProduct>>,
    TError,
    { data: AddProductBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: AddProductBody },
  TContext
> => {
  const mutationOptions = getAddProductMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCart = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetCartResponse>> => {
  return apiClient.get(`/cart`, options);
};

export const getGetCartQueryKey = () => {
  return [`/cart`] as const;
};

export const getGetCartQueryOptions = <
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCartQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({
    signal,
  }) => getCart({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCart>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCart>>
>;
export type GetCartQueryError = AxiosError<ProblemDetails>;

export function useGetCart<
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = AxiosError<ProblemDetails>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCart>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCart<
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCart>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCart<
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCart<
  TData = Awaited<ReturnType<typeof getCart>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCartQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const removeFromCart = (
  removeFromCartBody: RemoveFromCartBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemoveFromCartResponse>> => {
  const formData = new FormData();
  if (removeFromCartBody.category_ids !== undefined) {
    removeFromCartBody.category_ids.forEach((value) =>
      formData.append("category_ids", value.toString())
    );
  }

  return apiClient.delete(`/cart`, { data: formData, ...options });
};

export const getRemoveFromCartMutationOptions = <
  TError = AxiosError<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFromCart>>,
    TError,
    { data: RemoveFromCartBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeFromCart>>,
  TError,
  { data: RemoveFromCartBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeFromCart>>,
    { data: RemoveFromCartBody }
  > = (props) => {
    const { data } = props ?? {};

    return removeFromCart(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveFromCartMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeFromCart>>
>;
export type RemoveFromCartMutationBody = RemoveFromCartBody;
export type RemoveFromCartMutationError = AxiosError<ProblemDetails>;

export const useRemoveFromCart = <
  TError = AxiosError<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFromCart>>,
    TError,
    { data: RemoveFromCartBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof removeFromCart>>,
  TError,
  { data: RemoveFromCartBody },
  TContext
> => {
  const mutationOptions = getRemoveFromCartMutationOptions(options);

  return useMutation(mutationOptions);
};
