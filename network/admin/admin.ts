/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import type {
  AddProductRequest,
  AddShopRequest,
  AddShopResponse,
  ChangeItemPriceRequest,
  ProblemDetails,
} from '.././model';
import { orvalApiClient } from '.././api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const addProduct = (
  addProductRequest: AddProductRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    {
      url: `/products`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addProductRequest,
      signal,
    },
    options,
  );
};

export const getAddProductMutationOptions = <
  TData = Awaited<ReturnType<typeof addProduct>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addProduct'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProduct>>,
    { data: AddProductRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addProduct(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
};

export type AddProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProduct>>
>;
export type AddProductMutationBody = AddProductRequest;
export type AddProductMutationError = ProblemDetails;

export const useAddProduct = <
  TData = Awaited<ReturnType<typeof addProduct>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { data: AddProductRequest }, TContext> => {
  const mutationOptions = getAddProductMutationOptions(options);

  return useMutation(mutationOptions);
};
export const addShop = (
  addShopRequest: AddShopRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<AddShopResponse>(
    {
      url: `/shops`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addShopRequest,
      signal,
    },
    options,
  );
};

export const getAddShopMutationOptions = <
  TData = Awaited<ReturnType<typeof addShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addShop'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addShop>>,
    { data: AddShopRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addShop(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
};

export type AddShopMutationResult = NonNullable<
  Awaited<ReturnType<typeof addShop>>
>;
export type AddShopMutationBody = AddShopRequest;
export type AddShopMutationError = ProblemDetails;

export const useAddShop = <
  TData = Awaited<ReturnType<typeof addShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { data: AddShopRequest }, TContext> => {
  const mutationOptions = getAddShopMutationOptions(options);

  return useMutation(mutationOptions);
};
export const changePrice = (
  barcode: number,
  changeItemPriceRequest: ChangeItemPriceRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/products/${barcode}/prices`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: changeItemPriceRequest,
    },
    options,
  );
};

export const getChangePriceMutationOptions = <
  TData = Awaited<ReturnType<typeof changePrice>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: number; data: ChangeItemPriceRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['changePrice'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePrice>>,
    { barcode: number; data: ChangeItemPriceRequest }
  > = (props) => {
    const { barcode, data } = props ?? {};

    return changePrice(barcode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { barcode: number; data: ChangeItemPriceRequest },
    TContext
  >;
};

export type ChangePriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePrice>>
>;
export type ChangePriceMutationBody = ChangeItemPriceRequest;
export type ChangePriceMutationError = ProblemDetails;

export const useChangePrice = <
  TData = Awaited<ReturnType<typeof changePrice>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: number; data: ChangeItemPriceRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { barcode: number; data: ChangeItemPriceRequest },
  TContext
> => {
  const mutationOptions = getChangePriceMutationOptions(options);

  return useMutation(mutationOptions);
};
