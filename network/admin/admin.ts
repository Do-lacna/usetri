/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddProductRequest,
  AddShopRequest,
  AddShopResponse,
  ChangeItemPriceRequest,
  ProblemDetails
} from '.././model'



export const addProduct = (
    addProductRequest: AddProductRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.post(
      `/products`,
      addProductRequest,options
    );
  }



export const getAddProductMutationOptions = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: AddProductRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: AddProductRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addProduct>>, {data: AddProductRequest}> = (props) => {
          const {data} = props ?? {};

          return  addProduct(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddProductMutationResult = NonNullable<Awaited<ReturnType<typeof addProduct>>>
    export type AddProductMutationBody = AddProductRequest
    export type AddProductMutationError = AxiosError<ProblemDetails>

    export const useAddProduct = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addProduct>>, TError,{data: AddProductRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addProduct>>,
        TError,
        {data: AddProductRequest},
        TContext
      > => {

      const mutationOptions = getAddProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const addShop = (
    addShopRequest: AddShopRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AddShopResponse>> => {
    
    return axios.post(
      `/shops`,
      addShopRequest,options
    );
  }



export const getAddShopMutationOptions = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addShop>>, TError,{data: AddShopRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addShop>>, TError,{data: AddShopRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addShop>>, {data: AddShopRequest}> = (props) => {
          const {data} = props ?? {};

          return  addShop(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddShopMutationResult = NonNullable<Awaited<ReturnType<typeof addShop>>>
    export type AddShopMutationBody = AddShopRequest
    export type AddShopMutationError = AxiosError<ProblemDetails>

    export const useAddShop = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addShop>>, TError,{data: AddShopRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof addShop>>,
        TError,
        {data: AddShopRequest},
        TContext
      > => {

      const mutationOptions = getAddShopMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const changePrice = (
    barcode: number,
    changeItemPriceRequest: ChangeItemPriceRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.put(
      `/products/${barcode}/prices`,
      changeItemPriceRequest,options
    );
  }



export const getChangePriceMutationOptions = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePrice>>, TError,{barcode: number;data: ChangeItemPriceRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof changePrice>>, TError,{barcode: number;data: ChangeItemPriceRequest}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changePrice>>, {barcode: number;data: ChangeItemPriceRequest}> = (props) => {
          const {barcode,data} = props ?? {};

          return  changePrice(barcode,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChangePriceMutationResult = NonNullable<Awaited<ReturnType<typeof changePrice>>>
    export type ChangePriceMutationBody = ChangeItemPriceRequest
    export type ChangePriceMutationError = AxiosError<ProblemDetails>

    export const useChangePrice = <TError = AxiosError<ProblemDetails>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changePrice>>, TError,{barcode: number;data: ChangeItemPriceRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof changePrice>>,
        TError,
        {barcode: number;data: ChangeItemPriceRequest},
        TContext
      > => {

      const mutationOptions = getChangePriceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    