/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AddCategoryRequest,
  AddShopRequest,
  AddShopResponse,
  BulkUpdateRequest,
  ChangeItemPriceRequest,
  GetCategoriesAdminParams,
  GetCategoryAdminResponse,
  GetCategoryManagementAdminResponse,
  GetProductPricesResponse,
  GetProductsManagementAdminResponse,
  GetShopsAdminResponse,
  PatchCategoryRequest,
  PatchProductDto,
  PatchProductResponse,
  ProblemDetails,
  UpdateShopRequest,
  _ExportParams,
} from '.././model';
import { orvalApiClient } from '.././api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const addShop = (
  addShopRequest: AddShopRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<AddShopResponse>(
    {
      url: `/admin/shops`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addShopRequest,
      signal,
    },
    options,
  );
};

export const getAddShopMutationOptions = <
  TData = Awaited<ReturnType<typeof addShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addShop'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addShop>>,
    { data: AddShopRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addShop(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
};

export type AddShopMutationResult = NonNullable<
  Awaited<ReturnType<typeof addShop>>
>;
export type AddShopMutationBody = AddShopRequest;
export type AddShopMutationError = ProblemDetails;

export const useAddShop = <
  TData = Awaited<ReturnType<typeof addShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { data: AddShopRequest }, TContext> => {
  const mutationOptions = getAddShopMutationOptions(options);

  return useMutation(mutationOptions);
};
export const adminGetShops = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetShopsAdminResponse>(
    { url: `/admin/shops`, method: 'GET', signal },
    options,
  );
};

export const getAdminGetShopsQueryKey = () => {
  return [`/admin/shops`] as const;
};

export const getAdminGetShopsQueryOptions = <
  TData = Awaited<ReturnType<typeof adminGetShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminGetShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminGetShopsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminGetShops>>> = ({
    signal,
  }) => adminGetShops(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminGetShops>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AdminGetShopsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminGetShops>>
>;
export type AdminGetShopsQueryError = ProblemDetails;

export function useAdminGetShops<
  TData = Awaited<ReturnType<typeof adminGetShops>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminGetShops>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof adminGetShops>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetShops<
  TData = Awaited<ReturnType<typeof adminGetShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminGetShops>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof adminGetShops>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminGetShops<
  TData = Awaited<ReturnType<typeof adminGetShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminGetShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAdminGetShops<
  TData = Awaited<ReturnType<typeof adminGetShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof adminGetShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminGetShopsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateShop = (
  shopId: number,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    { url: `/admin/shops/${shopId}`, method: 'DELETE' },
    options,
  );
};

export const getUpdateShopMutationOptions = <
  TData = Awaited<ReturnType<typeof updateShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { shopId: number }, TContext>;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['updateShop'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateShop>>,
    { shopId: number }
  > = (props) => {
    const { shopId } = props ?? {};

    return updateShop(shopId, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { shopId: number },
    TContext
  >;
};

export type UpdateShopMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateShop>>
>;

export type UpdateShopMutationError = ProblemDetails;

export const useUpdateShop = <
  TData = Awaited<ReturnType<typeof updateShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { shopId: number }, TContext>;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { shopId: number }, TContext> => {
  const mutationOptions = getUpdateShopMutationOptions(options);

  return useMutation(mutationOptions);
};
export const patchShop = (
  shopId: number,
  updateShopRequest: UpdateShopRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/admin/shops/${shopId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateShopRequest,
    },
    options,
  );
};

export const getPatchShopMutationOptions = <
  TData = Awaited<ReturnType<typeof patchShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { shopId: number; data: UpdateShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['patchShop'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchShop>>,
    { shopId: number; data: UpdateShopRequest }
  > = (props) => {
    const { shopId, data } = props ?? {};

    return patchShop(shopId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { shopId: number; data: UpdateShopRequest },
    TContext
  >;
};

export type PatchShopMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchShop>>
>;
export type PatchShopMutationBody = UpdateShopRequest;
export type PatchShopMutationError = ProblemDetails;

export const usePatchShop = <
  TData = Awaited<ReturnType<typeof patchShop>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { shopId: number; data: UpdateShopRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { shopId: number; data: UpdateShopRequest },
  TContext
> => {
  const mutationOptions = getPatchShopMutationOptions(options);

  return useMutation(mutationOptions);
};
export const bulkPatchProductAdmin = (
  bulkUpdateRequest: BulkUpdateRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/admin/products`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: bulkUpdateRequest,
    },
    options,
  );
};

export const getBulkPatchProductAdminMutationOptions = <
  TData = Awaited<ReturnType<typeof bulkPatchProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: BulkUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['bulkPatchProductAdmin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bulkPatchProductAdmin>>,
    { data: BulkUpdateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return bulkPatchProductAdmin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: BulkUpdateRequest },
    TContext
  >;
};

export type BulkPatchProductAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof bulkPatchProductAdmin>>
>;
export type BulkPatchProductAdminMutationBody = BulkUpdateRequest;
export type BulkPatchProductAdminMutationError = ProblemDetails;

export const useBulkPatchProductAdmin = <
  TData = Awaited<ReturnType<typeof bulkPatchProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: BulkUpdateRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { data: BulkUpdateRequest }, TContext> => {
  const mutationOptions = getBulkPatchProductAdminMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteProductAdmin = (
  barcode: string,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    { url: `/admin/products/${barcode}`, method: 'DELETE' },
    options,
  );
};

export const getDeleteProductAdminMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { barcode: string }, TContext>;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['deleteProductAdmin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProductAdmin>>,
    { barcode: string }
  > = (props) => {
    const { barcode } = props ?? {};

    return deleteProductAdmin(barcode, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { barcode: string },
    TContext
  >;
};

export type DeleteProductAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProductAdmin>>
>;

export type DeleteProductAdminMutationError = ProblemDetails;

export const useDeleteProductAdmin = <
  TData = Awaited<ReturnType<typeof deleteProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { barcode: string }, TContext>;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { barcode: string }, TContext> => {
  const mutationOptions = getDeleteProductAdminMutationOptions(options);

  return useMutation(mutationOptions);
};
export const patchProductAdmin = (
  barcode: string,
  patchProductDto: PatchProductDto,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<PatchProductResponse>(
    {
      url: `/admin/products/${barcode}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: patchProductDto,
    },
    options,
  );
};

export const getPatchProductAdminMutationOptions = <
  TData = Awaited<ReturnType<typeof patchProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: string; data: PatchProductDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['patchProductAdmin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchProductAdmin>>,
    { barcode: string; data: PatchProductDto }
  > = (props) => {
    const { barcode, data } = props ?? {};

    return patchProductAdmin(barcode, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { barcode: string; data: PatchProductDto },
    TContext
  >;
};

export type PatchProductAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchProductAdmin>>
>;
export type PatchProductAdminMutationBody = PatchProductDto;
export type PatchProductAdminMutationError = ProblemDetails;

export const usePatchProductAdmin = <
  TData = Awaited<ReturnType<typeof patchProductAdmin>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: string; data: PatchProductDto },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { barcode: string; data: PatchProductDto },
  TContext
> => {
  const mutationOptions = getPatchProductAdminMutationOptions(options);

  return useMutation(mutationOptions);
};
export const _export = (
  params?: _ExportParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin/products/export`, method: 'GET', params, signal },
    options,
  );
};

export const getExportQueryKey = (params?: _ExportParams) => {
  return [`/admin/products/export`, ...(params ? [params] : [])] as const;
};

export const getExportQueryOptions = <
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(
  params?: _ExportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExportQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof _export>>> = ({
    signal,
  }) => _export(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof _export>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type _ExportQueryResult = NonNullable<
  Awaited<ReturnType<typeof _export>>
>;
export type _ExportQueryError = unknown;

export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(
  params: undefined | _ExportParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof _export>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(
  params?: _ExportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof _export>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(
  params?: _ExportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(
  params?: _ExportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsManagementAdmin = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductsManagementAdminResponse>(
    { url: `/admin/products-management`, method: 'GET', signal },
    options,
  );
};

export const getGetProductsManagementAdminQueryKey = () => {
  return [`/admin/products-management`] as const;
};

export const getGetProductsManagementAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsManagementAdminQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsManagementAdmin>>
  > = ({ signal }) => getProductsManagementAdmin(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsManagementAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsManagementAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsManagementAdmin>>
>;
export type GetProductsManagementAdminQueryError = ProblemDetails;

export function useGetProductsManagementAdmin<
  TData = Awaited<ReturnType<typeof getProductsManagementAdmin>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsManagementAdmin>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProductsManagementAdmin>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsManagementAdmin<
  TData = Awaited<ReturnType<typeof getProductsManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsManagementAdmin>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProductsManagementAdmin>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsManagementAdmin<
  TData = Awaited<ReturnType<typeof getProductsManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductsManagementAdmin<
  TData = Awaited<ReturnType<typeof getProductsManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getProductsManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsManagementAdminQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const changePrice = (
  barcode: string,
  shopId: number,
  changeItemPriceRequest: ChangeItemPriceRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/admin/products/${barcode}-${shopId}/prices`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: changeItemPriceRequest,
    },
    options,
  );
};

export const getChangePriceMutationOptions = <
  TData = Awaited<ReturnType<typeof changePrice>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: string; shopId: number; data: ChangeItemPriceRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['changePrice'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePrice>>,
    { barcode: string; shopId: number; data: ChangeItemPriceRequest }
  > = (props) => {
    const { barcode, shopId, data } = props ?? {};

    return changePrice(barcode, shopId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { barcode: string; shopId: number; data: ChangeItemPriceRequest },
    TContext
  >;
};

export type ChangePriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePrice>>
>;
export type ChangePriceMutationBody = ChangeItemPriceRequest;
export type ChangePriceMutationError = ProblemDetails;

export const useChangePrice = <
  TData = Awaited<ReturnType<typeof changePrice>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { barcode: string; shopId: number; data: ChangeItemPriceRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { barcode: string; shopId: number; data: ChangeItemPriceRequest },
  TContext
> => {
  const mutationOptions = getChangePriceMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getProductPrices = (
  barcode: string,
  shopId: number,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductPricesResponse>(
    {
      url: `/admin/products/${barcode}-${shopId}/prices`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getGetProductPricesQueryKey = (
  barcode: string,
  shopId: number,
) => {
  return [`/admin/products/${barcode}-${shopId}/prices`] as const;
};

export const getGetProductPricesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = ProblemDetails,
>(
  barcode: string,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductPricesQueryKey(barcode, shopId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductPrices>>
  > = ({ signal }) => getProductPrices(barcode, shopId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(barcode && shopId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductPrices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductPricesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductPrices>>
>;
export type GetProductPricesQueryError = ProblemDetails;

export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = ProblemDetails,
>(
  barcode: string,
  shopId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductPrices>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = ProblemDetails,
>(
  barcode: string,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductPrices>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = ProblemDetails,
>(
  barcode: string,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = ProblemDetails,
>(
  barcode: string,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductPricesQueryOptions(
    barcode,
    shopId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const addCategory = (
  addCategoryRequest: AddCategoryRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    {
      url: `/admin/categories`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addCategoryRequest,
      signal,
    },
    options,
  );
};

export const getAddCategoryMutationOptions = <
  TData = Awaited<ReturnType<typeof addCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCategory>>,
    { data: AddCategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return addCategory(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddCategoryRequest },
    TContext
  >;
};

export type AddCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCategory>>
>;
export type AddCategoryMutationBody = AddCategoryRequest;
export type AddCategoryMutationError = unknown;

export const useAddCategory = <
  TData = Awaited<ReturnType<typeof addCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: AddCategoryRequest },
  TContext
> => {
  const mutationOptions = getAddCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCategoriesAdmin = (
  params?: GetCategoriesAdminParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetCategoryAdminResponse>(
    { url: `/admin/categories`, method: 'GET', params, signal },
    options,
  );
};

export const getGetCategoriesAdminQueryKey = (
  params?: GetCategoriesAdminParams,
) => {
  return [`/admin/categories`, ...(params ? [params] : [])] as const;
};

export const getGetCategoriesAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesAdmin>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoriesAdmin>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCategoriesAdminQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoriesAdmin>>
  > = ({ signal }) => getCategoriesAdmin(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoriesAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoriesAdmin>>
>;
export type GetCategoriesAdminQueryError = ProblemDetails;

export function useGetCategoriesAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesAdmin>>,
  TError = ProblemDetails,
>(
  params: undefined | GetCategoriesAdminParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoriesAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesAdmin>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoriesAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesAdmin>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoriesAdmin>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesAdmin>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoriesAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesAdmin>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoriesAdmin>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCategoriesAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesAdmin>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesAdminParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoriesAdmin>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoriesAdminQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteCategory = (
  categoryId: number,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    { url: `/admin/categories/${categoryId}`, method: 'DELETE' },
    options,
  );
};

export const getDeleteCategoryMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { categoryId: number },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['deleteCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategory>>,
    { categoryId: number }
  > = (props) => {
    const { categoryId } = props ?? {};

    return deleteCategory(categoryId, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { categoryId: number },
    TContext
  >;
};

export type DeleteCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategory>>
>;

export type DeleteCategoryMutationError = unknown;

export const useDeleteCategory = <
  TData = Awaited<ReturnType<typeof deleteCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { categoryId: number },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { categoryId: number }, TContext> => {
  const mutationOptions = getDeleteCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const patchCategory = (
  categoryId: number,
  patchCategoryRequest: PatchCategoryRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/admin/categories/${categoryId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: patchCategoryRequest,
    },
    options,
  );
};

export const getPatchCategoryMutationOptions = <
  TData = Awaited<ReturnType<typeof patchCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { categoryId: number; data: PatchCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['patchCategory'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchCategory>>,
    { categoryId: number; data: PatchCategoryRequest }
  > = (props) => {
    const { categoryId, data } = props ?? {};

    return patchCategory(categoryId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { categoryId: number; data: PatchCategoryRequest },
    TContext
  >;
};

export type PatchCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchCategory>>
>;
export type PatchCategoryMutationBody = PatchCategoryRequest;
export type PatchCategoryMutationError = unknown;

export const usePatchCategory = <
  TData = Awaited<ReturnType<typeof patchCategory>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { categoryId: number; data: PatchCategoryRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { categoryId: number; data: PatchCategoryRequest },
  TContext
> => {
  const mutationOptions = getPatchCategoryMutationOptions(options);

  return useMutation(mutationOptions);
};
export const exportCategories = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin/categories/export`, method: 'GET', signal },
    options,
  );
};

export const getExportCategoriesQueryKey = () => {
  return [`/admin/categories/export`] as const;
};

export const getExportCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof exportCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportCategories>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExportCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof exportCategories>>
  > = ({ signal }) => exportCategories(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof exportCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExportCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof exportCategories>>
>;
export type ExportCategoriesQueryError = unknown;

export function useExportCategories<
  TData = Awaited<ReturnType<typeof exportCategories>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportCategories>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof exportCategories>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExportCategories<
  TData = Awaited<ReturnType<typeof exportCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportCategories>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof exportCategories>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExportCategories<
  TData = Awaited<ReturnType<typeof exportCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportCategories>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExportCategories<
  TData = Awaited<ReturnType<typeof exportCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exportCategories>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExportCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCategoriesManagementAdmin = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetCategoryManagementAdminResponse>(
    { url: `/admin/categories-management`, method: 'GET', signal },
    options,
  );
};

export const getGetCategoriesManagementAdminQueryKey = () => {
  return [`/admin/categories-management`] as const;
};

export const getGetCategoriesManagementAdminQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCategoriesManagementAdminQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoriesManagementAdmin>>
  > = ({ signal }) => getCategoriesManagementAdmin(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoriesManagementAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoriesManagementAdmin>>
>;
export type GetCategoriesManagementAdminQueryError = ProblemDetails;

export function useGetCategoriesManagementAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoriesManagementAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoriesManagementAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCategoriesManagementAdmin<
  TData = Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCategoriesManagementAdmin>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoriesManagementAdminQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
