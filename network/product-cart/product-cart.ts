/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { orvalApiClient } from '.././api-client';
import type {
  AddToProductCartRequest,
  AddToProductCartResponse,
  GetProductCartComparisonRequest,
  GetProductCartComparisonResponse,
  GetProductCartResponse,
  ProblemDetails,
} from '.././model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const addToProductCart = (
  addToProductCartRequest: AddToProductCartRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<AddToProductCartResponse>(
    {
      url: '/product-carts',
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: addToProductCartRequest,
    },
    options,
  );
};

export const getAddToProductCartMutationOptions = <
  TData = Awaited<ReturnType<typeof addToProductCart>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddToProductCartRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addToProductCart'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addToProductCart>>,
    { data: AddToProductCartRequest }
  > = props => {
    const { data } = props ?? {};

    return addToProductCart(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddToProductCartRequest },
    TContext
  >;
};

export type AddToProductCartMutationResult = NonNullable<
  Awaited<ReturnType<typeof addToProductCart>>
>;
export type AddToProductCartMutationBody = AddToProductCartRequest;
export type AddToProductCartMutationError = ProblemDetails;

export const useAddToProductCart = <
  TData = Awaited<ReturnType<typeof addToProductCart>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddToProductCartRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: AddToProductCartRequest },
  TContext
> => {
  const mutationOptions = getAddToProductCartMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getProductCart = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductCartResponse>(
    { url: '/product-carts', method: 'GET', signal },
    options,
  );
};

export const getGetProductCartQueryKey = () => {
  return ['/product-carts'] as const;
};

export const getGetProductCartQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductCart>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProductCart>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductCartQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductCart>>> = ({
    signal,
  }) => getProductCart(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductCart>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductCartQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductCart>>
>;
export type GetProductCartQueryError = ProblemDetails;

export function useGetProductCart<
  TData = Awaited<ReturnType<typeof getProductCart>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProductCart>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProductCart>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductCart<
  TData = Awaited<ReturnType<typeof getProductCart>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProductCart>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getProductCart>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductCart<
  TData = Awaited<ReturnType<typeof getProductCart>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProductCart>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductCart<
  TData = Awaited<ReturnType<typeof getProductCart>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getProductCart>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductCartQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductCartComparison = (
  getProductCartComparisonRequest: GetProductCartComparisonRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductCartComparisonResponse>(
    {
      url: '/product-carts-comparison',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: getProductCartComparisonRequest,
      signal,
    },
    options,
  );
};

export const getGetProductCartComparisonMutationOptions = <
  TData = Awaited<ReturnType<typeof getProductCartComparison>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: GetProductCartComparisonRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['getProductCartComparison'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getProductCartComparison>>,
    { data: GetProductCartComparisonRequest }
  > = props => {
    const { data } = props ?? {};

    return getProductCartComparison(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: GetProductCartComparisonRequest },
    TContext
  >;
};

export type GetProductCartComparisonMutationResult = NonNullable<
  Awaited<ReturnType<typeof getProductCartComparison>>
>;
export type GetProductCartComparisonMutationBody =
  GetProductCartComparisonRequest;
export type GetProductCartComparisonMutationError = ProblemDetails;

export const useGetProductCartComparison = <
  TData = Awaited<ReturnType<typeof getProductCartComparison>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: GetProductCartComparisonRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: GetProductCartComparisonRequest },
  TContext
> => {
  const mutationOptions = getGetProductCartComparisonMutationOptions(options);

  return useMutation(mutationOptions);
};
