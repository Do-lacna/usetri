/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { orvalApiClient } from '.././api-client';
import type { AddProductRequest, ProblemDetails } from '.././model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const addProductHarvester = (
  addProductRequest: AddProductRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    {
      url: '/products',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addProductRequest,
      signal,
    },
    options,
  );
};

export const getAddProductHarvesterMutationOptions = <
  TData = Awaited<ReturnType<typeof addProductHarvester>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['addProductHarvester'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProductHarvester>>,
    { data: AddProductRequest }
  > = props => {
    const { data } = props ?? {};

    return addProductHarvester(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
};

export type AddProductHarvesterMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProductHarvester>>
>;
export type AddProductHarvesterMutationBody = AddProductRequest;
export type AddProductHarvesterMutationError = ProblemDetails;

export const useAddProductHarvester = <
  TData = Awaited<ReturnType<typeof addProductHarvester>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: AddProductRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<TData, TError, { data: AddProductRequest }, TContext> => {
  const mutationOptions = getAddProductHarvesterMutationOptions(options);

  return useMutation(mutationOptions);
};
