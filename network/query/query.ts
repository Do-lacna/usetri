/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  GetCartComparisonParams,
  GetCartResponse,
  GetCategoriesParams,
  GetCategoryResponse,
  GetProductPricesResponse,
  GetProductsByBarcodeParams,
  GetProductsByBarcodeResponse,
  GetProductsParams,
  GetShopsResponse,
  ProblemDetails,
  ShopItemListDto,
} from ".././model";
import apiClient from "../api-client";

export const getProducts = (
  params?: GetProductsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ShopItemListDto[]>> => {
  return apiClient.get(`/products`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [`/products`, ...(params ? [params] : [])] as const;
};

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError = AxiosError<ProblemDetails>;

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<ProblemDetails>
>(
  params: undefined | GetProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getShops = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetShopsResponse>> => {
  return apiClient.get(`/shops`, options);
};

export const getGetShopsQueryKey = () => {
  return [`/shops`] as const;
};

export const getGetShopsQueryOptions = <
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetShopsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getShops>>> = ({
    signal,
  }) => getShops({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getShops>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetShopsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getShops>>
>;
export type GetShopsQueryError = AxiosError<ProblemDetails>;

export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = AxiosError<ProblemDetails>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getShops>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getShops>>,
        TError,
        TData
      >,
      "initialData"
    >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = AxiosError<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetShopsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCartComparison = (
  params?: GetCartComparisonParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetCartResponse>> => {
  return apiClient.get(`/carts-comparison`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetCartComparisonQueryKey = (
  params?: GetCartComparisonParams
) => {
  return [`/carts-comparison`, ...(params ? [params] : [])] as const;
};

export const getGetCartComparisonQueryOptions = <
  TData = Awaited<ReturnType<typeof getCartComparison>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCartComparisonParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCartComparison>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCartComparisonQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCartComparison>>
  > = ({ signal }) => getCartComparison(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCartComparison>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCartComparisonQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCartComparison>>
>;
export type GetCartComparisonQueryError = AxiosError<ProblemDetails>;

export function useGetCartComparison<
  TData = Awaited<ReturnType<typeof getCartComparison>>,
  TError = AxiosError<ProblemDetails>
>(
  params: undefined | GetCartComparisonParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCartComparison>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartComparison>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCartComparison<
  TData = Awaited<ReturnType<typeof getCartComparison>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCartComparisonParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCartComparison>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartComparison>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCartComparison<
  TData = Awaited<ReturnType<typeof getCartComparison>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCartComparisonParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCartComparison>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCartComparison<
  TData = Awaited<ReturnType<typeof getCartComparison>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCartComparisonParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCartComparison>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCartComparisonQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCategories = (
  params?: GetCategoriesParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetCategoryResponse>> => {
  const response = apiClient.get(`/categories`, {
    ...options,
    params: { ...params, ...options?.params },
  });
  return response;
};

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams) => {
  return [`/categories`, ...(params ? [params] : [])] as const;
};

export const getGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
    signal,
  }) => getCategories(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = AxiosError<ProblemDetails>;

export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = AxiosError<ProblemDetails>
>(
  params: undefined | GetCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = AxiosError<ProblemDetails>
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductPrices = (
  barcode: number,
  shopId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProductPricesResponse>> => {
  return apiClient.get(`/products/${barcode}-${shopId}/prices`, options);
};

export const getGetProductPricesQueryKey = (
  barcode: number,
  shopId: number
) => {
  return [`/products/${barcode}-${shopId}/prices`] as const;
};

export const getGetProductPricesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductPricesQueryKey(barcode, shopId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductPrices>>
  > = ({ signal }) =>
    getProductPrices(barcode, shopId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(barcode && shopId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductPrices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetProductPricesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductPrices>>
>;
export type GetProductPricesQueryError = AxiosError<ProblemDetails>;

export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  shopId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductPrices>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductPrices>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetProductPrices<
  TData = Awaited<ReturnType<typeof getProductPrices>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  shopId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductPrices>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetProductPricesQueryOptions(
    barcode,
    shopId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsByBarcode = (
  barcode: number,
  params?: GetProductsByBarcodeParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetProductsByBarcodeResponse>> => {
  return apiClient.get(`/products/${barcode}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetProductsByBarcodeQueryKey = (
  barcode: number,
  params?: GetProductsByBarcodeParams
) => {
  return [`/products/${barcode}`, ...(params ? [params] : [])] as const;
};

export const getGetProductsByBarcodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  params?: GetProductsByBarcodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsByBarcodeQueryKey(barcode, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByBarcode>>
  > = ({ signal }) =>
    getProductsByBarcode(barcode, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!barcode,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsByBarcode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetProductsByBarcodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByBarcode>>
>;
export type GetProductsByBarcodeQueryError = AxiosError<ProblemDetails>;

export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  params: undefined | GetProductsByBarcodeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBarcode>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  params?: GetProductsByBarcodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBarcode>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  params?: GetProductsByBarcodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = AxiosError<ProblemDetails>
>(
  barcode: number,
  params?: GetProductsByBarcodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetProductsByBarcodeQueryOptions(
    barcode,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
