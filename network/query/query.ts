/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';
import { orvalApiClient } from '.././api-client';
import type {
  GetCategoriesParams,
  GetCategoryPricesResponse,
  GetCategoryResponse,
  GetDiscountsParams,
  GetDiscountsResponse,
  GetDiscountsStatisticsResponse,
  GetPopularCategoryProductsResponse,
  GetPopularCategoryResponse,
  GetProductsByBarcodeQueryResponse,
  GetProductsParams,
  GetProductsResponse,
  GetProductsSemanticRequest,
  GetProductsSemanticResponse,
  GetShopsResponse,
  GetUnconfirmedDiscountsParams,
  GetUnconfirmedDiscountsResponse,
  ProblemDetails,
} from '.././model';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getProducts = (
  params?: GetProductsParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductsResponse>(
    { url: `/products`, method: 'GET', params, signal },
    options,
  );
};

export const getGetProductsQueryKey = (params?: GetProductsParams) => {
  return [`/products`, ...(params ? [params] : [])] as const;
};

export const getGetProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ProblemDetails,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProducts>>> = ({
    signal,
  }) => getProducts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProducts>>
>;
export type GetProductsQueryError = ProblemDetails;

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ProblemDetails,
>(
  params: undefined | GetProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ProblemDetails,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProducts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ProblemDetails,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProducts<
  TData = Awaited<ReturnType<typeof getProducts>>,
  TError = ProblemDetails,
>(
  params?: GetProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProducts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCategories = (
  params?: GetCategoriesParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetCategoryResponse>(
    { url: `/categories`, method: 'GET', params, signal },
    options,
  );
};

export const getGetCategoriesQueryKey = (params?: GetCategoriesParams) => {
  return [`/categories`, ...(params ? [params] : [])] as const;
};

export const getGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
    signal,
  }) => getCategories(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = ProblemDetails;

export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ProblemDetails,
>(
  params: undefined | GetCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCategories<
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = ProblemDetails,
>(
  params?: GetCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCategories>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCategoryPrices = (
  categoryId: number,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetCategoryPricesResponse>(
    { url: `/categories/${categoryId}/prices`, method: 'GET', signal },
    options,
  );
};

export const getGetCategoryPricesQueryKey = (categoryId: number) => {
  return [`/categories/${categoryId}/prices`] as const;
};

export const getGetCategoryPricesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryPrices>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCategoryPricesQueryKey(categoryId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCategoryPrices>>
  > = ({ signal }) => getCategoryPrices(categoryId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!categoryId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryPrices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryPricesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryPrices>>
>;
export type GetCategoryPricesQueryError = ProblemDetails;

export function useGetCategoryPrices<
  TData = Awaited<ReturnType<typeof getCategoryPrices>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryPrices>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryPrices<
  TData = Awaited<ReturnType<typeof getCategoryPrices>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryPrices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryPrices>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryPrices<
  TData = Awaited<ReturnType<typeof getCategoryPrices>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCategoryPrices<
  TData = Awaited<ReturnType<typeof getCategoryPrices>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryPrices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoryPricesQueryOptions(categoryId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDiscounts = (
  params?: GetDiscountsParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetDiscountsResponse>(
    { url: `/discounts`, method: 'GET', params, signal },
    options,
  );
};

export const getGetDiscountsQueryKey = (params?: GetDiscountsParams) => {
  return [`/discounts`, ...(params ? [params] : [])] as const;
};

export const getGetDiscountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDiscountsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDiscounts>>> = ({
    signal,
  }) => getDiscounts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDiscounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDiscountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDiscounts>>
>;
export type GetDiscountsQueryError = ProblemDetails;

export function useGetDiscounts<
  TData = Awaited<ReturnType<typeof getDiscounts>>,
  TError = ProblemDetails,
>(
  params: undefined | GetDiscountsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscounts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDiscounts<
  TData = Awaited<ReturnType<typeof getDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscounts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDiscounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDiscounts<
  TData = Awaited<ReturnType<typeof getDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetDiscounts<
  TData = Awaited<ReturnType<typeof getDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDiscounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDiscountsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDiscountsStatistics = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetDiscountsStatisticsResponse>(
    { url: `/discounts-statistics`, method: 'GET', signal },
    options,
  );
};

export const getGetDiscountsStatisticsQueryKey = () => {
  return [`/discounts-statistics`] as const;
};

export const getGetDiscountsStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDiscountsStatistics>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDiscountsStatistics>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDiscountsStatisticsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDiscountsStatistics>>
  > = ({ signal }) => getDiscountsStatistics(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDiscountsStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDiscountsStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDiscountsStatistics>>
>;
export type GetDiscountsStatisticsQueryError = ProblemDetails;

export function useGetDiscountsStatistics<
  TData = Awaited<ReturnType<typeof getDiscountsStatistics>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDiscountsStatistics>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDiscountsStatistics>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDiscountsStatistics<
  TData = Awaited<ReturnType<typeof getDiscountsStatistics>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDiscountsStatistics>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDiscountsStatistics>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDiscountsStatistics<
  TData = Awaited<ReturnType<typeof getDiscountsStatistics>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDiscountsStatistics>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetDiscountsStatistics<
  TData = Awaited<ReturnType<typeof getDiscountsStatistics>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDiscountsStatistics>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDiscountsStatisticsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsOutOfAllSubCategories = (
  categoryId: number,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetPopularCategoryProductsResponse>(
    {
      url: `/popular-categories/${categoryId}/products`,
      method: 'GET',
      signal,
    },
    options,
  );
};

export const getGetProductsOutOfAllSubCategoriesQueryKey = (
  categoryId: number,
) => {
  return [`/popular-categories/${categoryId}/products`] as const;
};

export const getGetProductsOutOfAllSubCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetProductsOutOfAllSubCategoriesQueryKey(categoryId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>
  > = ({ signal }) =>
    getProductsOutOfAllSubCategories(categoryId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!categoryId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsOutOfAllSubCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>
>;
export type GetProductsOutOfAllSubCategoriesQueryError = ProblemDetails;

export function useGetProductsOutOfAllSubCategories<
  TData = Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsOutOfAllSubCategories<
  TData = Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsOutOfAllSubCategories<
  TData = Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductsOutOfAllSubCategories<
  TData = Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
  TError = ProblemDetails,
>(
  categoryId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsOutOfAllSubCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsOutOfAllSubCategoriesQueryOptions(
    categoryId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPopularCategories = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetPopularCategoryResponse>(
    { url: `/popular-categories`, method: 'GET', signal },
    options,
  );
};

export const getGetPopularCategoriesQueryKey = () => {
  return [`/popular-categories`] as const;
};

export const getGetPopularCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPopularCategories>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularCategories>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPopularCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPopularCategories>>
  > = ({ signal }) => getPopularCategories(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPopularCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPopularCategories>>
>;
export type GetPopularCategoriesQueryError = ProblemDetails;

export function useGetPopularCategories<
  TData = Awaited<ReturnType<typeof getPopularCategories>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularCategories>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPopularCategories>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPopularCategories<
  TData = Awaited<ReturnType<typeof getPopularCategories>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularCategories>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPopularCategories>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPopularCategories<
  TData = Awaited<ReturnType<typeof getPopularCategories>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularCategories>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPopularCategories<
  TData = Awaited<ReturnType<typeof getPopularCategories>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPopularCategories>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPopularCategoriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsByBarcode = (
  barcode: string,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductsByBarcodeQueryResponse>(
    { url: `/products/${barcode}`, method: 'GET', signal },
    options,
  );
};

export const getGetProductsByBarcodeQueryKey = (barcode: string) => {
  return [`/products/${barcode}`] as const;
};

export const getGetProductsByBarcodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = ProblemDetails,
>(
  barcode: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsByBarcodeQueryKey(barcode);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsByBarcode>>
  > = ({ signal }) => getProductsByBarcode(barcode, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!barcode,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsByBarcode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsByBarcodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsByBarcode>>
>;
export type GetProductsByBarcodeQueryError = ProblemDetails;

export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = ProblemDetails,
>(
  barcode: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBarcode>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = ProblemDetails,
>(
  barcode: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByBarcode>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = ProblemDetails,
>(
  barcode: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductsByBarcode<
  TData = Awaited<ReturnType<typeof getProductsByBarcode>>,
  TError = ProblemDetails,
>(
  barcode: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsByBarcode>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsByBarcodeQueryOptions(barcode, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsSemantic = (
  getProductsSemanticRequest: GetProductsSemanticRequest,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetProductsSemanticResponse>(
    {
      url: `/semantic/products`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: getProductsSemanticRequest,
      signal,
    },
    options,
  );
};

export const getGetProductsSemanticMutationOptions = <
  TData = Awaited<ReturnType<typeof getProductsSemantic>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: GetProductsSemanticRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['getProductsSemantic'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getProductsSemantic>>,
    { data: GetProductsSemanticRequest }
  > = props => {
    const { data } = props ?? {};

    return getProductsSemantic(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: GetProductsSemanticRequest },
    TContext
  >;
};

export type GetProductsSemanticMutationResult = NonNullable<
  Awaited<ReturnType<typeof getProductsSemantic>>
>;
export type GetProductsSemanticMutationBody = GetProductsSemanticRequest;
export type GetProductsSemanticMutationError = ProblemDetails;

export const useGetProductsSemantic = <
  TData = Awaited<ReturnType<typeof getProductsSemantic>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: GetProductsSemanticRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: GetProductsSemanticRequest },
  TContext
> => {
  const mutationOptions = getGetProductsSemanticMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getShops = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetShopsResponse>(
    { url: `/shops`, method: 'GET', signal },
    options,
  );
};

export const getGetShopsQueryKey = () => {
  return [`/shops`] as const;
};

export const getGetShopsQueryOptions = <
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetShopsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getShops>>> = ({
    signal,
  }) => getShops(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getShops>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetShopsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getShops>>
>;
export type GetShopsQueryError = ProblemDetails;

export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = ProblemDetails,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getShops>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getShops>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetShops<
  TData = Awaited<ReturnType<typeof getShops>>,
  TError = ProblemDetails,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getShops>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetShopsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUnconfirmedDiscounts = (
  params?: GetUnconfirmedDiscountsParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetUnconfirmedDiscountsResponse>(
    { url: `/unconfirmed-discounts`, method: 'GET', params, signal },
    options,
  );
};

export const getGetUnconfirmedDiscountsQueryKey = (
  params?: GetUnconfirmedDiscountsParams,
) => {
  return ['/unconfirmed-discounts', ...(params ? [params] : [])] as const;
};

export const getGetUnconfirmedDiscountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetUnconfirmedDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUnconfirmedDiscountsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUnconfirmedDiscounts>>
  > = ({ signal }) => getUnconfirmedDiscounts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUnconfirmedDiscountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUnconfirmedDiscounts>>
>;
export type GetUnconfirmedDiscountsQueryError = ProblemDetails;

export function useGetUnconfirmedDiscounts<
  TData = Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
  TError = ProblemDetails,
>(
  params: undefined | GetUnconfirmedDiscountsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUnconfirmedDiscounts<
  TData = Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetUnconfirmedDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUnconfirmedDiscounts<
  TData = Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetUnconfirmedDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUnconfirmedDiscounts<
  TData = Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
  TError = ProblemDetails,
>(
  params?: GetUnconfirmedDiscountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUnconfirmedDiscounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUnconfirmedDiscountsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
