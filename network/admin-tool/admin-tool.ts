/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type { UploadCategoriesFileBody } from '.././model';
import { orvalApiClient } from '.././api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const index = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin`, method: 'GET', signal },
    options,
  );
};

export const getIndexQueryKey = () => {
  return [`/admin`] as const;
};

export const getIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof index>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof index>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIndexQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof index>>> = ({
    signal,
  }) => index(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof index>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type IndexQueryResult = NonNullable<Awaited<ReturnType<typeof index>>>;
export type IndexQueryError = unknown;

export function useIndex<
  TData = Awaited<ReturnType<typeof index>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof index>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof index>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIndex<
  TData = Awaited<ReturnType<typeof index>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof index>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof index>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useIndex<
  TData = Awaited<ReturnType<typeof index>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof index>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useIndex<
  TData = Awaited<ReturnType<typeof index>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof index>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getIndexQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const categoryManagement = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin/category`, method: 'GET', signal },
    options,
  );
};

export const getCategoryManagementQueryKey = () => {
  return [`/admin/category`] as const;
};

export const getCategoryManagementQueryOptions = <
  TData = Awaited<ReturnType<typeof categoryManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoryManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCategoryManagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoryManagement>>
  > = ({ signal }) => categoryManagement(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof categoryManagement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CategoryManagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoryManagement>>
>;
export type CategoryManagementQueryError = unknown;

export function useCategoryManagement<
  TData = Awaited<ReturnType<typeof categoryManagement>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoryManagement>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoryManagement>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoryManagement<
  TData = Awaited<ReturnType<typeof categoryManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoryManagement>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof categoryManagement>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoryManagement<
  TData = Awaited<ReturnType<typeof categoryManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoryManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCategoryManagement<
  TData = Awaited<ReturnType<typeof categoryManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof categoryManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCategoryManagementQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productManagement = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin/product`, method: 'GET', signal },
    options,
  );
};

export const getProductManagementQueryKey = () => {
  return [`/admin/product`] as const;
};

export const getProductManagementQueryOptions = <
  TData = Awaited<ReturnType<typeof productManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getProductManagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productManagement>>
  > = ({ signal }) => productManagement(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productManagement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ProductManagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof productManagement>>
>;
export type ProductManagementQueryError = unknown;

export function useProductManagement<
  TData = Awaited<ReturnType<typeof productManagement>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productManagement>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof productManagement>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductManagement<
  TData = Awaited<ReturnType<typeof productManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productManagement>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof productManagement>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useProductManagement<
  TData = Awaited<ReturnType<typeof productManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useProductManagement<
  TData = Awaited<ReturnType<typeof productManagement>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productManagement>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getProductManagementQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const _export = (
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<void>(
    { url: `/admin/export-categories`, method: 'GET', signal },
    options,
  );
};

export const getExportQueryKey = () => {
  return [`/admin/export-categories`] as const;
};

export const getExportQueryOptions = <
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExportQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof _export>>> = ({
    signal,
  }) => _export(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof _export>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type _ExportQueryResult = NonNullable<
  Awaited<ReturnType<typeof _export>>
>;
export type _ExportQueryError = unknown;

export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof _export>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof _export>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExport<
  TData = Awaited<ReturnType<typeof _export>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof _export>>, TError, TData>
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExportQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const uploadCategoriesFile = (
  uploadCategoriesFileBody: UploadCategoriesFileBody,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (uploadCategoriesFileBody.file !== undefined) {
    formData.append('file', uploadCategoriesFileBody.file);
  }

  return orvalApiClient<void>(
    {
      url: `/admin/upload-categories`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  );
};

export const getUploadCategoriesFileMutationOptions = <
  TData = Awaited<ReturnType<typeof uploadCategoriesFile>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadCategoriesFileBody },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['uploadCategoriesFile'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadCategoriesFile>>,
    { data: UploadCategoriesFileBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadCategoriesFile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UploadCategoriesFileBody },
    TContext
  >;
};

export type UploadCategoriesFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadCategoriesFile>>
>;
export type UploadCategoriesFileMutationBody = UploadCategoriesFileBody;
export type UploadCategoriesFileMutationError = unknown;

export const useUploadCategoriesFile = <
  TData = Awaited<ReturnType<typeof uploadCategoriesFile>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UploadCategoriesFileBody },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: UploadCategoriesFileBody },
  TContext
> => {
  const mutationOptions = getUploadCategoriesFileMutationOptions(options);

  return useMutation(mutationOptions);
};
