/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Dolacna.Backend.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  CheckReviewListRequest,
  GetBrigaderReviewListResponse,
  GetProductsForBrigaderParams,
  ProblemDetails,
} from '.././model';
import { orvalApiClient } from '.././api-client';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getProductsForBrigader = (
  params?: GetProductsForBrigaderParams,
  options?: SecondParameter<typeof orvalApiClient>,
  signal?: AbortSignal,
) => {
  return orvalApiClient<GetBrigaderReviewListResponse>(
    { url: `/brigader/review-list`, method: 'GET', params, signal },
    options,
  );
};

export const getGetProductsForBrigaderQueryKey = (
  params?: GetProductsForBrigaderParams,
) => {
  return [`/brigader/review-list`, ...(params ? [params] : [])] as const;
};

export const getGetProductsForBrigaderQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsForBrigader>>,
  TError = ProblemDetails,
>(
  params?: GetProductsForBrigaderParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsForBrigader>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsForBrigaderQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsForBrigader>>
  > = ({ signal }) => getProductsForBrigader(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsForBrigader>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsForBrigaderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsForBrigader>>
>;
export type GetProductsForBrigaderQueryError = ProblemDetails;

export function useGetProductsForBrigader<
  TData = Awaited<ReturnType<typeof getProductsForBrigader>>,
  TError = ProblemDetails,
>(
  params: undefined | GetProductsForBrigaderParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsForBrigader>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsForBrigader>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsForBrigader<
  TData = Awaited<ReturnType<typeof getProductsForBrigader>>,
  TError = ProblemDetails,
>(
  params?: GetProductsForBrigaderParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsForBrigader>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsForBrigader>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsForBrigader<
  TData = Awaited<ReturnType<typeof getProductsForBrigader>>,
  TError = ProblemDetails,
>(
  params?: GetProductsForBrigaderParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsForBrigader>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductsForBrigader<
  TData = Awaited<ReturnType<typeof getProductsForBrigader>>,
  TError = ProblemDetails,
>(
  params?: GetProductsForBrigaderParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsForBrigader>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof orvalApiClient>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsForBrigaderQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const checkItemInReviewList = (
  checkReviewListRequest: CheckReviewListRequest,
  options?: SecondParameter<typeof orvalApiClient>,
) => {
  return orvalApiClient<void>(
    {
      url: `/brigader/review-list`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: checkReviewListRequest,
    },
    options,
  );
};

export const getCheckItemInReviewListMutationOptions = <
  TData = Awaited<ReturnType<typeof checkItemInReviewList>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: CheckReviewListRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}) => {
  const mutationKey = ['checkItemInReviewList'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checkItemInReviewList>>,
    { data: CheckReviewListRequest }
  > = (props) => {
    const { data } = props ?? {};

    return checkItemInReviewList(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: CheckReviewListRequest },
    TContext
  >;
};

export type CheckItemInReviewListMutationResult = NonNullable<
  Awaited<ReturnType<typeof checkItemInReviewList>>
>;
export type CheckItemInReviewListMutationBody = CheckReviewListRequest;
export type CheckItemInReviewListMutationError = ProblemDetails;

export const useCheckItemInReviewList = <
  TData = Awaited<ReturnType<typeof checkItemInReviewList>>,
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: CheckReviewListRequest },
    TContext
  >;
  request?: SecondParameter<typeof orvalApiClient>;
}): UseMutationResult<
  TData,
  TError,
  { data: CheckReviewListRequest },
  TContext
> => {
  const mutationOptions = getCheckItemInReviewListMutationOptions(options);

  return useMutation(mutationOptions);
};
